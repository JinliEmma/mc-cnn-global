1d-filter
 for(int k = -wnd_offset; k <= wnd_offset; ++k) {
        if(0 >x+k || w <= x+k) continue;
        int k_idx_0 = idx_0 + k;               //supported pixel
        int k_idx_1 = idx_1 + k;               //corresponding pixel for supported pixel

        uchar * ptr_k_bgr_0 = bgr_0+3*k_idx_0-1;             //color for center pixel
        uchar * ptr_k_bgr_1 = bgr_1+3*k_idx_1-1;             //color for

        int delta_0 = (int)(abs(*(++ptr_k_bgr_0) - c_b_0));
        int delta_1 = (int)(abs(*(++ptr_k_bgr_0) - c_g_0));
        int delta_2 = (int)(abs(*(++ptr_k_bgr_0) - c_r_0));
        int delta_3 = (int)(abs(*(++ptr_k_bgr_1) - c_b_1));
        int delta_4 = (int)(abs(*(++ptr_k_bgr_1) - c_g_1));
        int delta_5 = (int)(abs(*(++ptr_k_bgr_1) - c_r_1));

        int c_diff_0 = (int)(sqrt((delta_0 * delta_0 + delta_1 * delta_1 + delta_2 * delta_2)) + .5f);
        int c_diff_1 = (int)(sqrt((delta_3 * delta_3 + delta_4 * delta_4 + delta_5 * delta_5)) + .5f);

        double weight_c = m_range_table[c_diff_0] * m_range_table[c_diff_1];
        double weight_r = m_spatial_table[abs(k)] * m_spatial_table[abs(k)];

        res += weight_c * weight_r * in_[k_idx_0];
    }
    out_[idx_0]= res;
    //y filtering
    //vertical filtering
    in_ = temp;
    out_ = out;
    for(int y = 0; y < h; ++y) {
        int idy = y * w;
        for(int x = 0; x < d; ++x) {
            int idx = idy + x;
            out_[idx] = in_[idx];
        }
        for(int x = 0; x < w; ++x) {
           float res = 0;



        }
    }
